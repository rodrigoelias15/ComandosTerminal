bash (cria um bash filho no terminal)

variavel="conteudo" (cria variavel no bash local, sem espaços entre o conteudo e sinal de "=", para que o linux não interprete como um comando)

variavel=`comando` (insere a saída do comando na variável, basta colocá-lo entre crases. Outra forma de escrever é usando o subshell, dessa forma: variavel=$(comando))

echo $variavel (exibe conteúdo da variável)

echo -e "mensagem" (comando para saída de mensagens, -e ativa backslash escape para interpretar comandos)

export variavel (export faz variavel ser reconhecida em subshells e subprocessos)

variavel_array=(elem1 elem2 elem3) (criação de array com respectivos elementos, separados por espaço)

variavel_array[i]="conteudo" (substitui o elemento de índice "i" pelo novo conteudo)

echo ${variavel_array[*]} (imprime todos os elementos do array)

echo ${variavel_array[i]} (imprime elemento de índice "i" do array)

variavel=$[num1 * num2] (operações matemáticas com números inteiros. Podem ser usado diferentes operadores como *, /, +, -. Ex: var2=$[$var1 * (5 - 3)]

unset (deleta variavel criada localmente, aconselhável usar este comando no final de scripts que se tenha criado variáveis)

unset ${variavel_array[i]} (deleta elemento de indice "i")

nome_funcao(){ comandos; } (cria uma função no bash, é necessário soltar espaço entre comandos e chaves. O ponto-vírgula serve para separar comandos se escritos na mesma linha, para escrevê-los numa linha de cada vez, basta teclar ENTER após o primeiro parenteses, para salvar e terminar o escopo da função, basta fechar chaves na linha seguinte. Para executar a função, digite seu nome. Comando typeset -f lista todas as funções do bash)

alias apelido_criado="comando" (cria apelidos no bash, sem espaços entre o conteudo (comando) e sinal de "=")

unalias apelido_criado (apaga apelido criado, aconselhável usar este comando no final de scripts que se tenha criado aliases)

read valor_digitado (comando usado para entrada de valores pelo teclado, ex: read -p "Digite valor para variavel: " valor_digitado, valor_digitado precisa de espaço depois das aspas duplas)

nome_aplicativo < nome_arquivo (redirecionamento de entrada, quando o conteudo do arquivo é passado para o aplicativo e interpretado como entrada, exemplo: no caso do aplicativo "wc", a saída do comando seria a quantidade de linhas, palavras e bytes do arquivo de texto; caso fosse o aplicativo "bc" (calculadora), havendo um texto no arquivo como 5*3+4^2, a saída seria o resultado da operação, 31 neste caso)

nome_aplicativo << eof (redirecionamento de entrada, esse tipo de redirecionamento funciona como o anterior (nome_aplicativo < nome_arquivo), porém não importamos o conteúdo de um arquivo para o aplicativo, nós escrevemos em tempo real o conteudo que queremos redirecionar como entrada. Para salvar e finalizar o conteúdo, escrevemos eof (quer dizer "end of file") na ultima linha e teclamos ENTER. Obs: eof é uma recomendação, podemos substituir eof por outra palavra qualquer)


//========= Script Propriamente Dito ===========//

#!/bin/bash indica qual shell/interpretador vai executar o script (deve-se começar todo script com esse comentário)

# é usado para comentar linhas inteiras

Para comentar em blocos, iniciamos o comentario com : ' (necessário espaço entre dois pontos e aspas simples) e finalizamos com ' como no seguinte exemplo:

: '
    Este é 
    um
    comentario
'

Para operações matemáticas maiores e complexas, podemos por exemplo escrever:
---------------------------------------------
#!/bin/bash
var1=5
var2=10
resultado=`bc << eof
a=$var1*$var2
a^2
eof`

echo "Resultado da operação é $resultado"

OU

#!/bin/bash
var1=5
var2=10
resultado=$(bc << eof
a=$var1*$var2
a^2
eof
)   #Fechamento de parenteses feito na linha abaixo do "eof"
    #para não atrapalhar resultado do redirecionamento de entrada

echo "Resultado da operação é $resultado"
---------------------------------------------


If-then-else e if-aninhado que verifica se comandos tiveram êxito, exemplo:
----------------------------------------------------------------
if comando
then 
    echo "Comando obteve saída igual a 0, ou seja, verdadeiro"
else 
    echo "Comando obteve saída igual a 1, ou seja, falso"
fi

OU

if comando
then 
  proposicao
elif comando2
  proposicao
elif comando3
  proposicao
else 
  proposicao
fi
------------------------------------------------------------------


If-then-else e if-aninhado para comparações do tipo arquivo, strings e numérica. Para isso usamos o comando test (if test condicao) ou ocultando-o com colchetes duplos (if [[ condicao ]]), pois estes possuem mais recursos e são mais flexíveis que colchetes simples. É necessário um espaço entre if, condição e colchetes. Para verificar mais de uma condição, pode-se acrescentar operadores como AND ou OR (if [[ condicao ]] && [[ condicao ]]).
Para comparação de números inteiros, usamos os seguintes operadores:

-eq (equal)
-ne (not equal)
-gt (greater then)
-ge (greater or equal then)
-lt (less then)
-le (less or equal then)

Exemplos de comparações numéricas:
-----------------------------------------
if test $var1 -le 30
then 
    echo "$var1 é menor ou igual a 30"
else 
    echo "$var1 é maior que 30"
fi

OU

if [[ $var1 -le 30 ]]
then 
    echo "$var1 é menor ou igual a 30"
else 
    echo "$var1 é maior que 30"
fi
----------------------------------------

Podemos usar os seguintes operadores pré-definidos dentro das comparações if:

-e (verifica existência (exists) de arquivo ou pasta)
-d (verifica se é diretório e se existe)
-f (verifica se é arquivo e se existe)
-z (verifica se comprimento (length) da variável ou string é zero, ou seja, se está vazia)
-n (verifica se comprimento (length) da variável ou string é maior que zero)
-r (verifica se arquivo pode ser lido)
-w (verifica se arquivo pode ser escrito)
-x (verifica se arquivo pode ser executado)

Exemplos:
----------------------------------------
arquivo="/usr/local/bin/node"
if [[ ! -f $arquivo ]]
then
    echo "$arquivo não existe!"
else
    echo "$arquivo existe!"
fi

OU

for item in ./* 
do
    if [[ -d $item ]]
    then
        aux=$(ls $item)         #variavel auxiliar para armazenar saida do comando ls
        if [[ -z $aux ]]; then  #verifica se conteudo da variavel esta vazia
            echo "$item é pasta e está vazia!"
            rm -r $item
            echo "$item apagada com sucesso!"
        else
            echo "$item é pasta e contem arquivos!"
        fi
    else
        echo "$item não é pasta"
    fi
done

----------------------------------------

Para comparações de strings, usamos comparadores convencionais como <, >, = ou !=. Para comparação de strings como maior que ou menor que, o bash considera a ordem alfabética das strings, por exemplo: Fabio > Rodrigo (F vem antes que R em ordem alfabética)

Exemplos de comparações de strings:
-----------------------------------------
nome1="Rodrigo"
nome2="Elias"

if [[ $nome1 < $nome2 ]]; then
    echo "$nome1 vem antes de $nome2 em ordem alfabética"
elif [[ $nome1 > $nome2 ]]; then
    echo "$nome1 vem depois de $nome2 em ordem alfabética"
else
    echo "Strings are equal"
fi

OU

nome=rodrigo
if [[ $USER != rodrigo ]]
then
  echo "Olá $nome"
else
  echo "Nome incorreto"
fi
----------------------------------------

Para estrutura "for" segue a seguinte estrutura:

for item in `comando`
do
  proposicao
done

OU 

for item in $(comando)
do
  proposicao
done

OU

for item in variavel_vetor
do
  proposicao
done

OU

for item in nome_diretorio/nome_arquivo
do
  proposicao
done

OU

for((i=numero_inteiro; condicao; incremento/decremento))
do
  proposicao
done

Exemplos com for:
--------------------------------
vetor=(1 2 3)
i=1
for elemento in ${vetor[*]}
do
  echo "Imprime elemento $i: $elemento"
  i=$[i+1]
done
---------------------------------
i=1
for elemento in /home/rodrigo/*
do
  echo "Imprime elemento $i: $elemento" #imprime nome de todos elementos do diretorio
  i=$[i+1]
done
---------------------------------
for (( i=1; i<=15; i++ ))
do
  echo "Numero: $i"
done
----------------------------------


Segue exemplo para estrutura while:
--------------------------------------------
var1=5
while [[ var1 -ne 0 ]]
do
  var1=$[var1-1]
  echo -n "$var1 "
done
echo "" #para quebrar linha no fim do while
---------------------------------------------


//=========================================//


//============= Curiosidades =============//

Para inicializar scripts com o sistema, basta colocar os scripts ou atalhos com final .sh no diretório /etc/profile.d/, o arquivo de configuração /etc/profile executa todos os scripts desse diretório na inicialização do sistema ou no login de usuário (script vai ser executado de maneira global, independente do usuário que estiver logado).

Arquivo ~/.profile é executado quando feito login no terminal

Aliases, funções e variáveis específicas para cada usuário do sistema podem ser salvas permanentemente se escritas no arquivo de configuração ~/.bashrc, ele é inicializado toda vez que o terminal é aberto, fazendo referência ao usuário atual (com ou sem login).
Para salvar aliases, funções e variáveis de forma permanentemente e global (para todos usuários), basta escrevê-las no arquivo de configuração /etc/bash.bashrc

Resumindo a execução dos arquivos, na iniciallização do sistema apenas o arquivo /etc/profile é executado; ao abrir o terminal apenas o ~/.bashrc é executado e ao fazer login do usuario, os arquivos /etc/profile e ~/.profile são executados e o arquivo ~/.bashrc é executado indiretamente pelo ~./profile; 

Para acessar arquivos ou scripts de qualquer local do sistema, basta move-los para algum diretório listado na variável PATH ou criar um link simbólico (atalho) para um desses diretórios (mais recomendado), como /usr/local/bin/ por exemplo, ou então acrescentar o diretório do arquivo escolhido na variável PATH

";" significa fim de linha

Shell é interpretador de linha de comando, ele provê uma interface entre usuario e kernel, e executa programas dando a resposta em forma de saídas. Um tipo de shell bastante popular é o bash (Bourne Again SHell), usado na maioria das distribuições Linux

Comando dot(.) ou source executam arquivos no contexto atual do bash. Quando executamos um arquivo da forma ./nome_arquivo, ele é executado em subshell, mas ao executar com dot ou source da forma . nome_arquivo OU source nome_arquivo, ele é executado no contexto atual do bash, fazendo com que por exemplo variaveis criadas ou cd (change directory) sejam reconhecidas pelo bash atual.

Subshells são shells filhos do shell atual, eles nos retornam a saída de certos comandos, podemos usar $(comandos) ou criar um subshell executando bash; shell scripts são executados em subshells por padrão.

Shell interativo é o proprio terminal, podemos interagir com ele através de comandos e receber saidas. Shell não interativo é o shell script, ele pode simular interação se houver por exemplo, o comando read para que digitemos algo na execução do programa.

//======================================//

